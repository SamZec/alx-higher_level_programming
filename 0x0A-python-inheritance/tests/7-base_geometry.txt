7-base_geometry.txt
Doctstring test for 7-base_geometry.py containing class BaseGeometry
that defines a geometry object

Usage:
Instantiate the module like this
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

No output if arg1 is string and arg 2 is int
>>> bg.integer_validator("my_int", 12)

error is raised is arg2 is not int
>>> bg.integer_validator("my_int", 12.0)
Traceback (most recent call last):
	 raise TypeError('{} must be an integer'.format(name))
TypeError: my_int must be an integer

error is raise if arg2 is less or equal to 0
>>> bg.integer_validator("my_int", -1)
Traceback (most recent call last):
	raise ValueError('{} must be greater than 0'.format(name))
ValueError: my_int must be greater than 0

if float infinity is passed to arg2
>>> bg.integer_validator("my_int", float('INF'))
Traceback (most recent call last):
	 raise TypeError('{} must be an integer'.format(name))
TypeError: my_int must be an integer

if float nan is passed to arg2
>>> bg.integer_validator("my_int", float('NAN'))
Traceback (most recent call last):
	raise TypeError('{} must be an integer'.format(name))
TypeError: my_int must be an integer

catching the exception raised
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0
>>>
